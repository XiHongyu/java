package com.polymorphi;
	/**
	 *  多态：
	 *  同一个类型使用不同的实例，实现不同的结果
	 *  多态的前提是继承  方法重写是实现多态的基础
	 *  1.子类的对象可以赋值给父类的引用（父类引用指向子类对象）
	 *  2.当父类引用调用方法是表现出不同的状态（执行子类重写的方法）
	 *
	 *	抽象类：用abstract修饰
	 *		1.抽象类与一般类一样也可以有属性和方法
	 *		2.抽象类不能被实例化，需要通过子类实现其方法
	 *		3.有抽象方法的类必须定义成抽象类
	 *		
	 *	抽象方法：用abstract修饰
	 *		1.抽象方法没有方法体，不能有大括号
	 *		2.抽象方法不能用final  static private修饰
	 *		4.继承抽象类必须重写其抽象方法，否则也必须定义成抽象类
	 *		
	 */
public class Demo1 {
	
	
}
